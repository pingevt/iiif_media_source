<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\iiif_image_handling\IiifImageHandlingProcessor;
use Drupal\iiif_media_source\Plugin\Field\FieldType\IiifId;

/**
 * Implements hook_entity_insert().
 *
 * @see focal_point_entity_update
 */
function iiif_image_crop_entity_insert(EntityInterface $entity) {
  iiif_image_crop_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function iiif_image_crop_entity_update(EntityInterface $entity) {
  // ksm($entity);
  // ksm("hi");
  // Only worry about entities that are fieldable.
  if ($entity instanceof FieldableEntityInterface) {
    // ksm("checking fields...");
    // Loop all the fields and save focal point values for images.
    foreach ($entity->getFieldDefinitions() as $key => $field) {
      // ksm($key, $field->getType());
      if ($field->getType() == 'iiif_id' && $entity->hasField($field->getName())) {
        // ksm("Correct field, i think");
        // if ($key == "field_media_iiif_image") {
        // ksm($entity->{$field->getName()});
        $crop_type = \Drupal::config('iiif_image_crop.settings')->get('crop_type');
        // ksm( $crop_type );
        // Loop through all values for this field. Its cardinality might be > 1.
        foreach ($entity->{$field->getName()} as $item) {

          if (!$item instanceof IiifId) {
            // todo: log an error.
            continue;
          }
          // If (!isset($item->crop)) {
          //   ksm("NOT a field with a crop: ", $item);
          //   continue;
          // }.
          $crop_manager = \Drupal::service('iiif_image_crop.crop_manager');
          // $crop = $crop_manager->getCropEntity($item->entity, $crop_type);
          $crop = $crop_manager->getCropIiifEntity($item, $crop_type, $entity->id());
          // ksm($crop);
          if ($crop) {
            $img_crop = NULL;
            // Use the default focal point on new crop entities.
            if ($crop->isNew()) {
              $img_crop = \Drupal::config('crop.settings')->get('default_value');
            }

            $width = NULL;
            $height = NULL;

            // Use the focal point set over the UI.
            if (!empty($item->iiif_crop)) {
              $img_crop = $item->iiif_crop;
              $image = $item->getImg($item->getValue());
              $width = $image->getWidth();
              $height = $image->getHeight();
              // ksm($crop);
              // Keep the original crop value to be able to use it during hooks.
              if (!$crop->get('x')->isEmpty() && !$crop->get('y')->isEmpty() && !$crop->get('width')->isEmpty() && !$crop->get('height')->isEmpty()) {
                $x = $crop->get('x')->value;
                $y = $crop->get('y')->value;
                $w = $crop->get('width')->value;
                $h = $crop->get('height')->value;
                $crop_original = $crop_manager->absoluteToRelative($x, $y, $w, $h, $width, $height);
                $entity->{$field->getName()}->crop_original = implode(',', $crop_original);
              }
            }

            // ksm($img_crop, $item);.
            if ($img_crop && $item->width && $item->height) {
              [$x, $y, $w, $h] = explode(',', $img_crop);
              $crop_manager->saveCropEntity($x, $y, $w, $h, $width, $height, $crop);
            }
            else {
              // ksm("didn't save crop");.
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function iiif_image_crop_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, array $form, FormStateInterface $form_state) {
  if ($plugin->getPluginId() == "iiif_image_widget") {
    // ksm($plugin->getPluginId());
    $element['add_iiif_crop'] = [
      '#type' => 'checkbox',
      '#title' => t('Add IIIF Crop'),
      '#default_value' => $plugin->getThirdPartySetting('iiif_image_crop', 'add_iiif_crop') ?? FALSE,
    ];

    $element['iiif_crop_preview_image_style_size'] = [
      '#title' => t('Preview image style size (in pixels)'),
      '#type' => 'number',
      '#default_value' => $plugin->getThirdPartySetting('iiif_image_crop', 'iiif_crop_preview_image_style_size') ?? 150,
      '#description' => t('The preview image will be shown while editing the content. What is its max size.'),
      '#weight' => 16,
    ];

    return $element;
  }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function iiif_image_crop_field_widget_settings_summary_alter(array &$summary, array $context) {
  $add = $context['widget']->getThirdPartySetting('iiif_image_crop', 'add_iiif_crop');
  if ($add) {
    $summary[] = t('Adding IIIF Crop');

    $size = $context['widget']->getThirdPartySetting('iiif_image_crop', 'iiif_crop_preview_image_style_size');
    if ($size) {
      $summary[] = t('Thumbnail size: ' . $size . "px");
    }
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function iiif_image_crop_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {

  if ($context['widget']->getPluginId() == "iiif_image_widget") {

    $settings = $context['widget']->getThirdPartySettings('iiif_image_crop');

    if ($settings && isset($settings['add_iiif_crop']) && $settings['add_iiif_crop']) {
      $element = IiifImageHandlingProcessor::buildElementCrop($element, $form_state, $context);
    }
  }
}
