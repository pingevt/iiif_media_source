<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\crop\Entity\Crop;
use Drupal\iiif_media_source\Plugin\Field\FieldType\IiifId;
use Drupal\node\Entity\Node;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_entity_insert().
 *
 * @see focal_point_entity_update
 */
function iiif_image_crop_entity_insert(EntityInterface $entity) {
  iiif_image_crop_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function iiif_image_crop_entity_update(EntityInterface $entity) {
  // ksm($entity);
  // ksm("hi");
  // Only worry about entities that are fieldable.
  if ($entity instanceof FieldableEntityInterface) {
    // ksm("checking fields...");
    // Loop all the fields and save focal point values for images.
    foreach ($entity->getFieldDefinitions() as $key => $field) {
      // ksm($key, $field->getType());
      if ($field->getType() == 'iiif_id' && $entity->hasField($field->getName())) {
        // ksm("Correct field, i think");
      // if ($key == "field_media_iiif_image") {
        // ksm($entity->{$field->getName()});
        $crop_type = \Drupal::config('iiif_image_crop.settings')->get('crop_type');
        // ksm( $crop_type );
        // Loop through all values for this field. Its cardinality might be > 1.
        foreach ($entity->{$field->getName()} as $item) {

          if (!$item instanceof IiifId) {
            ksm("NOT A IiifId FIELD: ", $item);
            continue;
          }
          // if (!isset($item->crop)) {
          //   ksm("NOT a field with a crop: ", $item);
          //   continue;
          // }

          $crop_manager = \Drupal::service('iiif_image_crop.crop_manager');
          // $crop = $crop_manager->getCropEntity($item->entity, $crop_type);
          $crop = $crop_manager->getCropIiifEntity($item, $crop_type, $entity->id());
          // ksm($crop);

          if ($crop) {
            $img_crop = NULL;
            // Use the default focal point on new crop entities.
            if ($crop->isNew()) {
              $img_crop = \Drupal::config('crop.settings')->get('default_value');
            }

            // Use the focal point set over the UI.
            if (!empty($item->crop)) {
              $img_crop = $item->crop;
              $image = $item->getImg($item->getValue());
              $width = $image->getWidth();
              $height = $image->getHeight();
              // ksm($crop);
              // Keep the original crop value to be able to use it during hooks.
              if (!$crop->get('x')->isEmpty() && !$crop->get('y')->isEmpty() && !$crop->get('width')->isEmpty() && !$crop->get('height')->isEmpty()) {
                $x = $crop->get('x')->value;
                $y = $crop->get('y')->value;
                $w = $crop->get('width')->value;
                $h = $crop->get('height')->value;
                $crop_original = $crop_manager->absoluteToRelative($x, $y, $w, $h, $width, $height);
                $entity->{$field->getName()}->crop_original = implode(',', $crop_original);
              }
            }

            // ksm($img_crop, $item);

            if ($img_crop && $item->width && $item->height) {
              [$x, $y, $w, $h] = explode(',', $img_crop);
              $crop_manager->saveCropEntity($x, $y, $w, $h, $width, $height, $crop);
            }
            else {
              // ksm("didn't save crop");
            }
          }
        }
      }
    }
  }
}


/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function iiif_image_crop_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, array $form, FormStateInterface $form_state) {
  if ($plugin->getPluginId() == "iiif_image_widget") {
    // ksm($plugin->getPluginId());

    $element['add_iiif_crop'] = [
      '#type' => 'checkbox',
      '#title' => t('Add IIIF Crop'),
      '#default_value' => $plugin->getThirdPartySetting('iiif_image_crop', 'add_iiif_crop'),
    ];

    return $element;
  }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function iiif_image_crop_field_widget_settings_summary_alter(array &$summary, array $context) {
  $add = $context['widget']->getThirdPartySetting('iiif_image_crop', 'add_iiif_crop');

  // ksm($add);

  if ($add) {
    $summary[] = t('Adding IIIF Crop');
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function iiif_image_crop_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {

  if ($context['widget']->getPluginId() == "iiif_image_widget") {
    // ksm(func_get_args());
    // ksm($context['widget']->getPluginId());
    // ksm($context['widget']->getSettings());
    // ksm($context['widget']->getThirdPartySettings());
    // ksm($context['widget']->getPluginDefinition());
    // ksm($element);

    $settings = $context['widget']->getThirdPartySettings('iiif_image_crop');

    if ($settings && isset($settings['add_iiif_crop']) && $settings['add_iiif_crop']) {
      // todo - can i simplify this with a subform or something?

      $items = $context['items'];
      $delta = $context['delta'];

      // ksm($items);

      // $field_name = $this->fieldDefinition->getName();
      // $element['#field_name'] = $field_name;
      $element['#process'][] = 'iiif_image_crop__process';

      $element['#item'] = $items[$delta]->getValue();

      if (!$items[$delta]->isEmpty()) {
        // ksm($items[$delta]);

        $img = $items[$delta]->getImg($items[$delta]->getValue());
        $element['#item']['full_url'] = $img->getFullUrl();
        $element['#item']['width'] = $img->getwidth();
        $element['#item']['height'] = $img->getHeight();

        $scaled_url = $img->getScaledUrl(500, 500);

        $element['crop_preview'] = [
          '#theme' => 'image',
          '#uri' => $scaled_url,
          '#weight' => 1,
          '#attributes' => [
            'style' => "margin: 0 1rem 3rem 0",
          ],
          '#prefix' => "<div class='cropper-image'>",
          '#suffix' => "</div>",
        ];
      }

      $element['#crop'] = [
        'offsets' => "0,0,100,100",
      ];

      // ksm($element);

      // return $element;
    }
  }
}

function iiif_image_crop__process($element, FormStateInterface $form_state, $form) {
  $item = $element['#item'];
  // ksm($element);

  $element_selectors = [
    'crop' => 'crop-' . implode('-', $element['#parents']),
  ];

  if (!isset($item['crop']) && isset($item['full_url'])) {
    // $url = $item['_image']->getFullUrl();
    // todo; should we make our own crop type?
    $crop_type = \Drupal::config('iiif_image_crop.settings')->get('crop_type');
// ksm($url, $crop_type);

    // ksm($item['full_url'], $crop_type);
    $crop = Crop::findCrop($item['full_url'], $crop_type);

    if ($crop) {
      $anchor = \Drupal::service('iiif_image_crop.crop_manager')->absoluteToRelative($crop->x->value, $crop->y->value, $crop->width->value, $crop->height->value, $item['width'], $item['height']);
      $item['crop'] = implode(',', [...$anchor]);
      // ksm($anchor, $item);
    }
  }

  $default_crop_value = $item['crop'] ?? $element['#crop']['offsets'];

  // Add the crop indicator to preview.
  if (isset($element['crop_preview'])) {
    $preview = [
      // 'indicator' => self::createCropIndicator($element['#delta'], $element_selectors),
      'thumbnail' => $element['crop_preview'],
    ];

    // Use the existing preview weight value so that the crop indicator
    // and thumbnail appear in the correct order.
    $preview['#weight'] = $element['crop_preview']['#weight'] ?? 0;
    unset($preview['thumbnail']['#weight']);

    $element['crop_preview'] = $preview;
  }

  // ksm('hw2');

  // Add the crop field.
  $element['crop'] = iiif_image_crop__createCropField($element['#field_name'], $element_selectors, $default_crop_value);

  return $element;
}

function iiif_image_crop__validateCrop($element, FormStateInterface $form_state) {
  // todo: VALIDATE!
  // if (empty($element['#value']) || (FALSE === \Drupal::service('iiif_image_crop.crop_manager')->validateCrop($element['#value']))) {
  //   $replacements = ['@title' => strtolower($element['#title'])];
  //   $form_state->setError($element, new TranslatableMarkup('The @title field should be in the form "leftoffset,topoffset" where offsets are in percentages. Ex: 25,75.', $replacements));
  // }
}

function iiif_image_crop__validateCropWidget(array &$element, FormStateInterface $form_state) {
  iiif_image_crop__validateCrop($element, $form_state);
}

function iiif_image_crop__createCropField($field_name, array $element_selectors, $default_crop_value) {
  // ksm($field_name, $element_selectors, $default_crop_value);
  $field = [
    '#type' => 'textfield',
    '#title' => new TranslatableMarkup('Crop'),
    '#description' => new TranslatableMarkup('Specify the crop of this image in the form "leftoffset,topoffset,width,height" where all numbers are in percents. Ex: 25,75,50,5'),
    '#default_value' => $default_crop_value,
    '#element_validate' => ['iiif_image_crop__validateCrop'],
    '#attributes' => [
      'class' => ['crop', $element_selectors['crop']],
      'data-selector' => $element_selectors['crop'],
      'data-field-name' => $field_name,
    ],
    '#wrapper_attributes' => [
      'class' => ['crop-wrapper'],
    ],
    '#attached' => [
      'library' => ['iiif_image_crop/iiif_image_crop.crop'],
    ],
  ];

  // ksm($field);
  return $field;
}
