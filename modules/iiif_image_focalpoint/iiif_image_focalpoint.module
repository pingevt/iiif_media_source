<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\iiif_media_source\Plugin\Field\FieldType\IiifId;
use Drupal\crop\Entity\Crop;
use Drupal\node\Entity\Node;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_theme().
 */
function iiif_image_focalpoint_theme($existing, $type, $theme, $path) {
  return [
    'iiif_focal_point_crop_summary' => [
      'variables' => ['data' => NULL, 'effect' => []],
    ],
    'iiif_focal_point_scale_crop_summary' => [
      'variables' => ['data' => NULL, 'effect' => []],
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 *
 * @see focal_point_entity_update
 */
function iiif_image_focalpoint_entity_insert(EntityInterface $entity) {
  iiif_image_focalpoint_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function iiif_image_focalpoint_entity_update(EntityInterface $entity) {
  // ksm($entity);
  // ksm("hi");
  // Only worry about entities that are fieldable.
  if ($entity instanceof FieldableEntityInterface) {
    // ksm("checking fields...");
    // Loop all the fields and save focal point values for images.
    foreach ($entity->getFieldDefinitions() as $key => $field) {
      // ksm($key, $field->getType());
      if ($field->getType() == 'iiif_id' && $entity->hasField($field->getName())) {
        // ksm("Correct field, i think");
      // if ($key == "field_media_iiif_image") {
        // ksm($entity->{$field->getName()});
        // @todo do i need to create settings for this module for croptype? Probably.
        $crop_type = \Drupal::config('iiif_image_focalpoint.settings')->get('crop_type');
        // ksm( $crop_type );
        // Loop through all values for this field. Its cardinality might be > 1.
        foreach ($entity->{$field->getName()} as $item) {

          if (!$item instanceof IiifId) {
            // ksm("NOT A IiifId FIELD");
            continue;
          }

          $focal_point_manager = \Drupal::service('iiif_image_focalpoint.focal_point_manager');
          // $crop = $focal_point_manager->getCropEntity($item->entity, $crop_type);
          $crop = $focal_point_manager->getCropIiifEntity($item, $crop_type, $entity->id());
          // ksm($crop);

          if ($crop) {
            $focal_point = NULL;
            // Use the default focal point on new crop entities.
            if ($crop->isNew()) {
              $focal_point = \Drupal::config('iiif_image_focalpoint.settings')->get('default_value');
            }

            // Use the focal point set over the UI.
            if (!empty($item->focal_point)) {
              $focal_point = $item->focal_point;

              // Keep the original focal_point value to be able to use it during hooks.
              if (!$crop->get('x')->isEmpty() && !$crop->get('y')->isEmpty()) {
                $x = $crop->get('x')->value;
                $y = $crop->get('y')->value;
                $width = $item->width ?? 0;
                $height = $item->height ?? 0;
                $focal_point_original = $focal_point_manager->absoluteToRelative($x, $y, $width, $height);
                $entity->{$field->getName()}->focal_point_original = implode(',', $focal_point_original);
              }
            }

            // ksm($focal_point, $item);

            if ($focal_point && $item->width && $item->height) {
              [$x, $y] = explode(',', $focal_point);
              $focal_point_manager->saveCropEntity($x, $y, $item->width, $item->height, $crop);
            }
            else {
              // ksm("didn't save crop");
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function iiif_image_focalpoint_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // ksm(func_get_args());

  // Add option to Image style.
  // if ($form_id == "iiif_image_style_add_form" || $form_id == "iiif_image_style_edit_form") {
  //   $entity = $form_state->getFormObject()->getEntity();
  //   // ksm($entity);

  //   $settings = $entity->getThirdPartySettings('iiif_image_focalpoint');

  //   // ksm($settings);

  //   $form['crops_and_focal'] = [
  //     '#type' => 'fieldset',
  //     '#title' => t('Crops and Focal Points'),
  //     '#collapsible' => FALSE,
  //     '#collapsed' => FALSE,
  //   ];

  //   $form['use_iiif_focalpoint'] = [
  //     '#type' => 'checkbox',
  //     '#title' => t('Use IIIF focal point'),
  //     '#default_value' => $settings['use_iiif_focalpoint'] ?? FALSE,
  //     '#group' => 'crops_and_focal',
  //   ];
  // }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function iiif_image_focalpoint_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, array $form, FormStateInterface $form_state) {
  if ($plugin->getPluginId() == "iiif_image_widget") {
    // ksm($plugin->getPluginId());

    $element['add_iiif_focalpoint'] = [
      '#type' => 'checkbox',
      '#title' => t('Add IIIF focal point'),
      '#default_value' => $plugin->getThirdPartySetting('iiif_image_focalpoint', 'add_iiif_focalpoint'),
    ];

    return $element;
  }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function iiif_image_focalpoint_field_widget_settings_summary_alter(array &$summary, array $context) {
  $add = $context['widget']->getThirdPartySetting('iiif_image_focalpoint', 'add_iiif_focalpoint');

  // ksm($add);

  if ($add) {
    $summary[] = t('Adding IIIF Focal Point');
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function iiif_image_focalpoint_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {

  if ($context['widget']->getPluginId() == "iiif_image_widget") {
    // ksm(func_get_args());
    // ksm($context['widget']->getPluginId());
    // ksm($context['widget']->getSettings());
    // ksm($context['widget']->getThirdPartySettings());
    // ksm($context['widget']->getPluginDefinition());
    // ksm($element);

    $settings = $context['widget']->getThirdPartySettings('iiif_image_focalpoint');
    // ksm($settings, isset($settings['add_iiif_focalpoint']), $settings['add_iiif_focalpoint']);

    if ($settings && isset($settings['add_iiif_focalpoint']) && $settings['add_iiif_focalpoint']) {
      // todo: bring in the focal point field element.
      // ksm($element, $context);

      $items = $context['items'];
      $delta = $context['delta'];

      // todo: fix this so we remove it responsibly.
      unset($element['thumbnail']);

      $element['#process'][] = 'iiif_image_focalpoint_process_widget';

      $element['#item'] = $items[$delta]->getValue();

      if (!$items[$delta]->isEmpty()) {
        // ksm($items[$delta]);

        $img = $items[$delta]->getImg($items[$delta]->getValue());
        $element['#item']['full_url'] = $img->getFullUrl();
        $element['#item']['width'] = $img->getwidth();
        $element['#item']['height'] = $img->getHeight();

        // todo fix with 3rd party setting.
        $scaled_url = $img->getScaledUrl(500, 500);

        $element['preview'] = [
          '#theme' => 'image',
          '#uri' => $scaled_url,
          '#weight' => 1,
          '#attributes' => [
            'style' => "margin: 0 1rem 3rem 0",
          ],
        ];

      }

      // todo fix with 3rd party setting.
      $element['#focal_point'] = [
        'offsets' => "50,50",
      ];

    }
  }
}

function iiif_image_focalpoint_process_widget($element, FormStateInterface $form_state, $form) {
  $item = $element['#item'];

  $element_selectors = [
    'focal_point' => 'focal-point-' . implode('-', $element['#parents']),
  ];

  if (!isset($item['focal_point']) && isset($item['full_url'])) {
    $crop_type = \Drupal::config('iiif_image_focalpoint.settings')->get('crop_type');
    $crop = Crop::findCrop($item['full_url'], $crop_type);
    // ksm($crop, $item);
    if ($crop) {
      $anchor = \Drupal::service('iiif_image_focalpoint.focal_point_manager')->absoluteToRelative($crop->x->value, $crop->y->value, $item['width'], $item['height']);
      // ksm($anchor);
      $item['focal_point'] = "{$anchor['x']},{$anchor['y']}";
    }
  }

  $default_focal_point_value = $item['focal_point'] ?? $element['#focal_point']['offsets'];

  // Add the focal point indicator to preview.
  if (isset($element['preview'])) {
    $preview = [
      'indicator' => createFocalPointIndicator($element['#delta'], $element_selectors),
      'thumbnail' => $element['preview'],
    ];

    // Use the existing preview weight value so that the focal point indicator
    // and thumbnail appear in the correct order.
    $preview['#weight'] = $element['preview']['#weight'] ?? 0;
    unset($preview['thumbnail']['#weight']);

    $element['preview'] = $preview;
  }

  // ksm($element);
  // Add the focal point field.
  $element['focal_point'] = createFocalPointField($element['#field_name'], $element_selectors, $default_focal_point_value);

  return $element;
}

function createFocalPointField($field_name, array $element_selectors, $default_focal_point_value) {

  $field = [
    '#type' => 'textfield',
    '#title' => new TranslatableMarkup('Focal point'),
    '#description' => new TranslatableMarkup('Specify the focus of this image in the form "leftoffset,topoffset" where offsets are in percents. Ex: 25,75'),
    '#default_value' => $default_focal_point_value,
    '#element_validate' => ['validateFocalPoint'],
    '#attributes' => [
      'class' => ['focal-point', $element_selectors['focal_point']],
      'data-selector' => $element_selectors['focal_point'],
      'data-field-name' => $field_name,
    ],
    '#wrapper_attributes' => [
      'class' => ['focal-point-wrapper'],
    ],
    '#attached' => [
      'library' => ['focal_point/drupal.focal_point'],
    ],
  ];

  return $field;
}

function createFocalPointIndicator($delta, array $element_selectors) {
  $indicator = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => ['focal-point-indicator'],
      'data-selector' => $element_selectors['focal_point'],
      'data-delta' => $delta,
    ],
  ];

  return $indicator;
}

function validateFocalPoint($element, FormStateInterface $form_state) {
  if (empty($element['#value']) || (FALSE === \Drupal::service('iiif_image_focalpoint.focal_point_manager')->validateFocalPoint($element['#value']))) {
    $replacements = ['@title' => strtolower($element['#title'])];
    $form_state->setError($element, new TranslatableMarkup('The @title field should be in the form "leftoffset,topoffset" where offsets are in percentages. Ex: 25,75.', $replacements));
  }
}
