<?php

/**
 * @file
 * IIIF Data.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Url;
use Drupal\iiif_media_source\Plugin\Field\FieldType\IiifId;
use Drupal\node\Entity\Node;

/**
 *
 */
function iiif_media_source_theme($existing, $type, $theme, $path) {
  return [
    'iiif_image' => [
      'variables' => [
        'image' => '',
        'crop' => '',
        'size_type' => 'resize_and_crop',
        'dest_width' => 100,
        'dest_height' => 100,
      ],
    ],
  ];
}

/**
 *
 */
function template_preprocess_iiif_image(&$variables) {

  $image = $variables['image'];

  $fp_x = $variables['crop']? (int) $variables['crop']->x->value : 0;
  $fp_y = $variables['crop']? (int) $variables['crop']->y->value : 0;

  $dest_width = $variables['dest_width']? (int) $variables['dest_width'] : NULL;
  $dest_height = $variables['dest_height']? (int) $variables['dest_height'] : NULL;

  $dest_ratio = ($dest_height != 0) ? $dest_width / $dest_height : 1;

  $orig_width = $image->getWidth();
  $orig_height = $image->getHeight();

  $orig_ratio = $orig_width / $orig_height;

  // @todo this should all be exported to a cropper class or something.
  if ($variables['size_type'] == "full") {
    $region = "full";
    $size = "max";
    $rotation = 0;
    $quality = 'default';

    $variables['content'] = [
      'image' => [
        '#theme' => 'image',
        '#uri' => $image->getBuiltImageUrl($region, $size, $rotation, $quality),
        '#attributes' => [
          'width' => $orig_width,
          'height' => $orig_height,
          'class' => ['iiif-image'],
        ],
      ],
    ];
  }
  elseif ($variables['size_type'] == "scale") {
    $region = "full";
    $size = "$dest_width,$dest_height";
    $rotation = 0;
    $quality = 'default';

    $variables['content'] = [
      'image' => [
        '#theme' => 'image',
        '#uri' => $image->getBuiltImageUrl($region, $size, $rotation, $quality),
        '#attributes' => [
          'width' => $dest_width,
          'height' => $dest_height,
          'class' => ['iiif-image'],
        ],
      ],
    ];

  }
  elseif ($variables['size_type'] == "resize") {
    $region = "full";
    $size = "!$dest_width,$dest_height";
    $rotation = 0;
    $quality = 'default';

    $variables['content'] = [
      'image' => [
        '#theme' => 'image',
        '#uri' => $image->getBuiltImageUrl($region, $size, $rotation, $quality),
        '#attributes' => [
          'width' => $dest_width,
          'height' => $dest_height,
          'class' => ['iiif-image'],
        ],
      ],
    ];
  }
  elseif ($variables['size_type'] == "scale_and_crop") {
    // < 1 horizontal.
    if ($orig_ratio > $dest_ratio) {
      $region_width = $orig_height * $dest_width / $dest_height;
      $rx1 = (int) ($fp_x - ($region_width / 2));
      $rx2 = (int) ($fp_x + ($region_width / 2));
      $ry1 = 0;
      $ry2 = $orig_height;

      if ($rx1 < 0) {
        $rx2 += abs($rx1);
        $rx1 = 0;
      }
      if ($rx2 > $orig_height) {
        $rx1 -= $rx2 - $orig_height;
        $rx2 = $orig_height;
      }
    }
    else {
      $region_height = $orig_width * $dest_height / $dest_width;
      $rx1 = 0;
      $rx2 = $orig_width;
      $ry1 = (int) ($fp_y - ($region_height / 2));
      $ry2 = (int) ($region_height + $ry1);

      if ($ry1 < 0) {
        $ry2 += abs($ry1);
        $ry1 = 0;
      }
      if ($ry2 > $orig_height) {
        $ry1 -= $ry2 - $orig_height;
        $ry2 = $orig_height;
      }
    }

    $region = "$rx1,$ry1," . ($rx2 - $rx1) . "," . ($ry2 - $ry1);
    $size = "!$dest_width,$dest_height";
    $rotation = 0;
    $quality = 'default';

    $variables['content'] = [
      'image' => [
        '#theme' => 'image',
        '#uri' => $image->getBuiltImageUrl($region, $size, $rotation, $quality),
        '#attributes' => [
          'width' => $dest_width,
          'height' => $dest_height,
          'class' => ['iiif-image'],
        ],
      ],
    ];
  }
  elseif ($variables['size_type'] == "crop") {
    $rx1 = (int) ($fp_x - ($dest_width / 2));
    $rx2 = (int) ($fp_x + ($dest_width / 2));
    $ry1 = (int) ($fp_y - ($dest_height / 2));
    $ry2 = (int) ($fp_y + ($dest_height / 2));

    if ($rx1 < 0) {
      $rx2 += abs($rx1);
      $rx1 = 0;
    }
    if ($rx2 > $orig_height) {
      $rx1 -= $rx2 - $orig_height;
      $rx2 = $orig_height;
    }

    if ($ry1 < 0) {
      $ry2 += abs($ry1);
      $ry1 = 0;
    }
    if ($ry2 > $orig_height) {
      $ry1 -= $ry2 - $orig_height;
      $ry2 = $orig_height;
    }

    $region = "$rx1,$ry1," . ($rx2 - $rx1) . "," . ($ry2 - $ry1);
    $size = "!$dest_width,$dest_height";
    $rotation = 0;
    $quality = 'default';

    $variables['content'] = [
      'image' => [
        '#theme' => 'image',
        '#uri' => $image->getBuiltImageUrl($region, $size, $rotation, $quality),
        '#attributes' => [
          'width' => $dest_width,
          'height' => $dest_height,
          'class' => ['iiif-image'],
        ],
      ],
    ];
  }

}

/**
 *
 */
function iiif_media_source_media_view(&$build) {

}

/**
 *
 */
function iiif_media_source_preprocess_media(&$variables) {
  $media = $variables['elements']['#media'];
  if (isset($media->entity_reference_entity_modify)) {

    $override_data = explode(":", $media->entity_reference_entity_modify);
    $override_data = array_merge($override_data, explode(".", $override_data[2]));

    $parent_node = Node::load($override_data[3]);
    $vals = $parent_node->{$override_data[4]}->getValue();

  }

}

/**
 *
 */
function iiif_media_source_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {

}

/**
 *
 */
function iiif_media_source_node_view(&$build) {

}

/**
 * Implements hook_preprocess_iiif_image().
 */
function iiif_media_source_preprocess_iiif_image(&$variables) {

}

/**
 * Implements hook_entity_insert().
 *
 * @see focal_point_entity_update
 */
// function iiif_media_source_entity_insert(EntityInterface $entity) {
//   iiif_media_source_entity_update($entity);
// }

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
// function iiif_media_source_entity_update(EntityInterface $entity) {
//   // Only worry about entities that are fieldable.
//   if ($entity instanceof FieldableEntityInterface) {
//     // Loop all the fields and save focal point values for images.
//     foreach ($entity->getFieldDefinitions() as $key => $field) {
//       // ksm($key, $field->getType());
//       if ($field->getType() == 'iiif_id' && $entity->hasField($field->getName())) {
//       // if ($key == "field_media_iiif_image") {
//         // ksm($entity->{$field->getName()});
//         // @todo do i need to create settings for this module for croptype? Probably.
//         $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
//         // Loop through all values for this field. Its cardinality might be > 1.
//         foreach ($entity->{$field->getName()} as $item) {
//           $focal_point_manager = \Drupal::service('iiif_media_source.focal_point_manager');

//           if (!$item instanceof IiifId) {
//             continue;
//           }
//           // $crop = $focal_point_manager->getCropEntity($item->entity, $crop_type);
//           $crop = $focal_point_manager->getCropIiifEntity($item, $crop_type, $entity->id());
//           if($crop) {
//             $focal_point = NULL;
//             // Use the default focal point on new crop entities.
//             if ($crop->isNew()) {
//               $focal_point = \Drupal::config('focal_point.settings')->get('default_value');
//             }

//             // Use the focal point set over the UI.
//             if (!empty($item->focal_point)) {
//               $focal_point = $item->focal_point;

//               // Keep the original focal_point value to be able to use it during hooks.
//               if (!$crop->get('x')->isEmpty() && !$crop->get('y')->isEmpty()) {
//                 $x = $crop->get('x')->value;
//                 $y = $crop->get('y')->value;
//                 $width = $item->width ?? 0;
//                 $height = $item->height ?? 0;
//                 $focal_point_original = $focal_point_manager->absoluteToRelative($x, $y, $width, $height);
//                 $entity->{$field->getName()}->focal_point_original = join(',', $focal_point_original);
//               }
//             }

//             if ($focal_point && $item->width && $item->height) {
//               [$x, $y] = explode(',', $focal_point);
//               $focal_point_manager->saveCropEntity($x, $y, $item->width, $item->height, $crop);
//             }
//           }
//         }
//       }
//     }
//   }
// }
