################
# DrupalCI GitLabCI template
#
# Gitlab-ci.yml to replicate DrupalCI testing for Contrib
#
# With thanks to:
#   * The GitLab Acceleration Initiative participants
#   * DrupalSpoons
################

################
# Guidelines
#
# This template is designed to give any Contrib maintainer everything they need to test, without requiring modification. It is also designed to keep up to date with Core Development automatically through the use of include files that can be centrally maintained.
#
# However, you can modify this template if you have additional needs for your project.
################

################
# Includes
#
# Additional configuration can be provided through includes.
# One advantage of include files is that if they are updated upstream, the changes affect all pipelines using that include.
#
# Includes can be overridden by re-declaring anything provided in an include, here in gitlab-ci.yml
# https://docs.gitlab.com/ee/ci/yaml/includes.html#override-included-configuration-values
################

include:
  ################
  # DrupalCI includes:
  # As long as you include this, any future includes added by the Drupal Association will be accessible to your pipelines automatically.
  # View these include files at https://git.drupalcode.org/project/gitlab_templates/
  ################
  - project: $_GITLAB_TEMPLATES_REPO
    # "ref" value can be:
    # - Recommended (default) - `ref: $_GITLAB_TEMPLATES_REF` - The Drupal Association will update this value to the recommended tag for contrib.
    # - Latest - `ref: main` - Get the latest additions and bug fixes as they are merged into the templates.
    # - Minor or Major latests - `ref: 1.x-latest` or `ref: 1.0.x-latest` - Get the latest additions within a minor (mostly bugfixes) or major (bugs and new features).
    # - Fixed tag - `ref: 1.0.1` - Set the value to a known tag. This will not get any updates.
    # If you change the default value of ref, you should set the _CURL_TEMPLATES_REF variable in the variables section to be the same as set here.
    ref: $_GITLAB_TEMPLATES_REF
    file:
      - "/includes/include.drupalci.main.yml"
      - "/includes/include.drupalci.variables.yml"
      - "/includes/include.drupalci.workflows.yml"
#
################
# Pipeline configuration variables
#
# These are the variables provided to the Run Pipeline form that a user may want to override.
#
# Docs at https://git.drupalcode.org/project/gitlab_templates/-/blob/main/includes/include.drupalci.variables.yml
################
# variables:
#   SKIP_ESLINT: '1'
#   OPT_IN_TEST_NEXT_MAJOR: '1'
#   _CURL_TEMPLATES_REF: 'main'


#
# Start custom overrides.
#

variables:
  CI_TYPE: "module"
  # SKIP_CSPELL: 1
  # Broaden test coverage.
  OPT_IN_TEST_CURRENT: 1
  # OPT_IN_TEST_PREVIOUS_MINOR: 1
  # OPT_IN_TEST_PREVIOUS_MAJOR: 1
  # OPT_IN_TEST_NEXT_MAJOR: 1
  # OPT_IN_TEST_MAX_PHP: 1
  # CI_PHPUNIT_GROUP: iiif_media_source
  # Show more log output
  _PHPUNIT_EXTRA: --verbose
  # Convenient, and we have no secrets.
  _SHOW_ENVIRONMENT_VARIABLES: 1
  _PHPUNIT_CONCURRENT: 1
  _PHPUNIT_TESTGROUPS: ''


################
# Job overrides
################

.show-variables: &show-variables
  - |
    printf "CI_PIPELINE_SOURCE          = %s\n" $CI_PIPELINE_SOURCE &&
    printf "CI_DEFAULT_BRANCH           = %s\n" $CI_DEFAULT_BRANCH &&
    printf "CI_COMMIT_BRANCH            = %s\n" $CI_COMMIT_BRANCH &&
    printf "CI_COMMIT_TAG               = %s\n" $CI_COMMIT_TAG &&
    printf "CI_MERGE_REQUEST_IID        = %s\n" $CI_MERGE_REQUEST_IID &&
    printf "CI_MERGE_REQUEST_TITLE      = %s\n" "$CI_MERGE_REQUEST_TITLE" &&
    printf "CI_PROJECT_ROOT_NAMESPACE   = %s\n" $CI_PROJECT_ROOT_NAMESPACE &&
    printf "CI_PAGES_URL                = %s\n" $CI_PAGES_URL &&
    printf "CI_PROJECT_NAME             = %s\n" $CI_PROJECT_NAME &&
    printf "CI_JOB_NAME                 = %s\n" "$CI_JOB_NAME" &&
    printf "CI_JOB_NAME chopped         = %s\n" "${CI_JOB_NAME%:*}" &&
    printf "MODULE_NAME                 = %s\n" $MODULE_NAME




# -------------------------------- BUILD ---------------------------------------

.composer-base:
  after_script:
    # Show the last two commits. Current directory /builds/project/scheduler ($CI_PROJECT_DIR) is correct.
    - git show -2 --stat --oneline

# -------------------------------- VALIDATE ------------------------------------

eslint:
  allow_failure: false

stylelint:
  allow_failure: false

phpcs:
  allow_failure: false


# -------------------------------- TEST ----------------------------------------

phpunit:
  parallel:
    matrix:
      # Run test groups in parallel. This also speeds up identification of failing tests.
      - _MATRIX_VALUE:
        # - scheduler
        # - scheduler_api
        # - scheduler_drush
        # - scheduler_js
        # - scheduler_kernel
        # - scheduler_rules_integration
        - iiif_media_source
  before_script:
    - *show-variables
    - |
      printf "_MATRIX_VALUE               = %s\n" $_MATRIX_VALUE &&
      printf "_PHPUNIT_CONCURRENT         = %s\n" $_PHPUNIT_CONCURRENT &&
      printf "_PHPUNIT_TESTGROUPS         = %s\n" $_PHPUNIT_TESTGROUPS &&
      printf "_PHPUNIT_EXTRA              = %s\n" $_PHPUNIT_EXTRA &&
      printf "SYMFONY_DEPRECATIONS_HELPER = %s\n" $SYMFONY_DEPRECATIONS_HELPER
    - |
      if [[ "$_PHPUNIT_CONCURRENT" == "0" ]]; then
        # Specify parameters that will be passed to PHPUNIT (needs --group)
        export _PHPUNIT_EXTRA="$_PHPUNIT_EXTRA --group $_MATRIX_VALUE"
      else
        # Specify parameters that will be passed to RUN-TESTS.SH (without --group)
        export _PHPUNIT_EXTRA="$_PHPUNIT_EXTRA $_MATRIX_VALUE"
        # Ensure the value is 1 if it is not 0.
        export _PHPUNIT_CONCURRENT=1
      fi
    - echo "End of before_script _PHPUNIT_CONCURRENT=$_PHPUNIT_CONCURRENT _PHPUNIT_EXTRA=$_PHPUNIT_EXTRA"
